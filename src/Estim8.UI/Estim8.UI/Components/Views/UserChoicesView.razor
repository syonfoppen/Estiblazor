@using Estim8.UI.Services
@using Estim8.UI.Services.Rooms
@using Estim8.UI.Services.Users
@using System.ComponentModel

@rendermode InteractiveServer

@inject IRoomCollection RoomCollection;
@implements IDisposable

<div class="flex_row">
    <div class="flex_col user_name">
        <UserView UserId="@UserId" />
    </div>
    
    @foreach (var stage in Room.EstimationStages)
    {
        var choice = stage.GetChoice(UserId);
        var text = choice is null ? "..." : (stage.IsRevealed ? choice : "<i class=\"fa-solid fa-eye\"></i>");
        <div class="flex_col user_result">
            <h3>@((MarkupString)text)</h3>
        </div>
    }

</div>

@code {
    [Parameter]
    public UserId UserId { get; set; }

    [Parameter]
    public string RoomName { get; set; }

    public RoomViewModel Room { get; set; }

    protected override void OnInitialized()
    {
        Room = RoomCollection.GetOrCreateRoom(RoomName);
        foreach (var stage in Room.EstimationStages)
        {
            stage.ChoiceChanged += OnChoiceChanged;
            stage.PropertyChanged += Stage_PropertyChanged;
        }
        base.OnInitialized();
    }

    public async void OnChoiceChanged(object? sender, ChoiceChangedEventArgs e)
    {
        if (e.UserId == UserId)
        {
            await InvokeAsync(this.StateHasChanged);
        }
    }

    public async void Stage_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(EstimationStage.IsRevealed))
        {
            await InvokeAsync(this.StateHasChanged);
        }
    }

    public void Dispose()
    {
        foreach (var stage in Room.EstimationStages)
        {
            stage.ChoiceChanged -= OnChoiceChanged;
            stage.PropertyChanged -= Stage_PropertyChanged;
        }
    }
}

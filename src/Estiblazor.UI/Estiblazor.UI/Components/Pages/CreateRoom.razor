@page "/createroom"
@rendermode InteractiveServer

@using Estiblazor.UI.Services.Rooms
@using System.Collections.ObjectModel
@using Estiblazor.UI.Enums

@inject IRoomTemplateService RoomTemplateService

<div class="flex-wrapper">
    <div class="flex-header base">
        <h1>Room: </h1>
        <InputText @bind-Value="Room.Name" class="form-control" placeholder="Room Name" />

        <InputSelect @bind-Value="selectedTemplate" @bind-Value:after="SetTemplate">
            <option selected value="">Select a template</option>
            @foreach (var template in Enum.GetValues(typeof(RoomTemplates)))
            {
                <option value="@template">@template?.ToString()?.Replace("_", " ")</option>
            }
        </InputSelect>
   </div>
    <div class="flex-middle">
        <div class="add-stage-wrapper base">
            <div class="add-stage-overview">
                <h2>Stages</h2>
                <div class="stages">
                    @foreach (var stage in Room.EstimationStages)
                    {
                        <div @onclick="() => SetSelectedStage(stage.Name)" class="stage @(stage.Name == selectedStage?.Name ? "selected" : "")">@stage.Name</div>
                    }
                </div>
 
            </div>

            <div class="add-stage-input">
                <InputText @bind-Value="NewStageName" class="form-control" placeholder="Stage name" />
                <a class="add-button" @onclick="AddStage">Add Stage</a>
            </div>
       </div>
        <div class="choice-wrapper">
            <div class="choice-overview base">
                @if (selectedStage != null)
                {
                    <h3>@selectedStage?.Name Choices</h3>
                    var stage = Room.EstimationStages.FirstOrDefault(s => s.Name == selectedStage?.Name);

                    <div class="choices">
                        @if (stage != null)
                        {
                            @foreach (var choice in stage.AvailableChoices)
                            {
                                <div class="choice" @onclick="() => RemoveAvailableChoice(choice)">@((MarkupString)choice)</div>
                            }
                        }
                    </div>

                }
                else
                {
                    <span>No stage selected</span>
                }

            </div>
            <div class="choice-input base">
                <div> <InputText @bind-Value="NewChoiceName" class="form-control" placeholder="Choice name" /> </div>
                <div> <a class="add-button" @onclick="AddAvailableChoice">Add Choice</a> </div>
            </div>


        </div>
   </div>

</div>



@code {
    public string? NewStageName { get; set; }

    public string? NewChoiceName { get; set; }

    public RoomViewModel? Room { get; set; }

    public EstimationStage? selectedStage { get; set; }

    public RoomTemplates? selectedTemplate { get; set; }

    protected override void OnInitialized()
    {
        Room = new RoomViewModel()
            {
                EstimationStages = new ObservableCollection<EstimationStage>()
            };
        base.OnInitialized();
    }

    public void AddStage()
    {
        if (!string.IsNullOrEmpty(NewStageName))
        {
            var stage = new EstimationStage();
            stage.Name = NewStageName;
            NewStageName = string.Empty;

            Room.EstimationStages.Add(stage);
            StateHasChanged();
        }

    }

    public void SetSelectedStage(string stageName)
    {
        selectedStage = Room.EstimationStages.FirstOrDefault(s => s.Name == stageName);
    }

    public void AddAvailableChoice()
    {
        if (selectedStage != null && !string.IsNullOrEmpty(NewChoiceName))
        {
            selectedStage.AvailableChoices.Add(NewChoiceName);
            NewChoiceName = string.Empty;
        }   
    }

    public void RemoveAvailableChoice(string choice)
    {
        if (selectedStage != null && !string.IsNullOrEmpty(choice))
        {
            selectedStage.AvailableChoices.Remove(choice);
        }
    }

    public void SetTemplate()
    {
        if (selectedTemplate != null)
        {
            var stages = RoomTemplateService.GetRoomTemplate(selectedTemplate.Value);

            Room.EstimationStages = new ObservableCollection<EstimationStage>(stages);
        }
        
    }
}
